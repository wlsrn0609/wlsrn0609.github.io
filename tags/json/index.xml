<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Json on Wlsrn&#39;s Dev</title>
    <link>https://wlsrn0609.github.io/tags/json/</link>
    <description>Recent content in Json on Wlsrn&#39;s Dev</description>
    <generator>Hugo -- 0.133.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Sep 2024 09:44:12 +0900</lastBuildDate>
    <atom:link href="https://wlsrn0609.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>모델링</title>
      <link>https://wlsrn0609.github.io/post/%EB%AA%A8%EB%8D%B8%EB%A7%81/</link>
      <pubDate>Mon, 09 Sep 2024 09:44:12 +0900</pubDate>
      <guid>https://wlsrn0609.github.io/post/%EB%AA%A8%EB%8D%B8%EB%A7%81/</guid>
      <description>모델링 import Foundation enum Some {} typealias SomeModel = Some.Model extension Some { struct Model : Codable { let body : SomeModelData? enum CodingKeys: String, CodingKey { case body = &amp;#34;body&amp;#34; } init(from decoder: Decoder) throws { let values = try decoder.container(keyedBy: CodingKeys.self) body = try values.decodeIfPresent(SomeModelData.self, forKey: .body) } } } extension Some { struct SomeModelData : Codable { let version : String? enum CodingKeys: String, CodingKey { case version = &amp;#34;version&amp;#34; } init(from decoder: Decoder) throws { let values = try decoder.</description>
    </item>
  </channel>
</rss>
